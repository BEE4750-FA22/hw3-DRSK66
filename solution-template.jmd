---
title: "BEE 4750/5750 Homework 3"
author: "Andrew Scacchi (ads339)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1
```julia
using JuMP
using Plots
using HiGHS


```
## Problem 1.1
The decision variables for this model include the ultimate production capacity for each energy generation type, and the actual energy output at a given time
for each generator constructed.

Theoretical Production Capacity (MW) = $x_G$ with G representing the type of energy generated. G = {Geothermal, Coal, CCGT, CT, Wind, Solar}

Energy Output at time t (MW) = $y_{G,t}$

Nonserved energy values (MW) at a particular time t = $n_t$


## Problem 1.2
The objective function  to minimize total costs of building and operating the expansion plan is to minimize the annual capital investment cost, O&M costs, and the unserved energy cost, 
which all aggregate to Total Cost $Z$. This can be expressed mathematically as:

Initial investment cost for plant $G$ (per MW-year) = $C_G^{INV}$

O&M Costs (per MWh) for plant $G$ = $C_G^{OP}$

Unserved Energy costs  = $C_t^{NSE}$ 

Time passed (for now is equal to a year but so that no hardcoding) = $L_t$


Overall evaluate out to:
```math
min Z = \sum_G C_G^{INV} x_G + 365 \sum_G \sum_t L_t C_G^{OP} y_{G,t} + 365 \sum_t L_t C_t^{NSE} n_t
```



## Problem 1.3
There exist several physical constraints on this system.
The first one is that no generator can produce more energy than it is physically capable of:
```math
y_{G,t}≤ x_G CF_G
```

Additionally, demand at time t $D_t$ has to equal total energy production at t + unserved demand at t:
```math
\sum_G y_{G,t} + n_t = D_t
```

Lastly, production outputs cannot be negative:
```math
x_G ≥ 0 \\
y_{G,t} ≥ 0 \\
n_t ≥ 0 \\
```
My set of constraints is complete as all physical limitations (need to produce between 0 and x_G at time t) are accounted for. Additionally,
unmet demand has to be positive, and the sum of met and unmet demand sums to the total demand from clients. If unmet demand is 0 or more, then 
it is impossible to produce moreelectriity than is required, making a 4th constraint obsolete.

## Problem 1.4
```julia
Generators = ["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"];
G = 1:length(Generators);
T= hours;
Q = Model(HiGHS.Optimizer);
nseCost = 1000;

@variable(Q, x[G]>=0);
@variable(Q, y[G,T] >= 0);
@variable(Q, n[T] >=0);

@objective(Q, Min, investment_cost'* x + 365*(sum(op_cost'*y) + sum(n)*nseCost))

available = zeros(length(G), length(T));
available[1,:] .=thermal_cf[1];
available[2,:] .=thermal_cf[2];
available[3,:] .=thermal_cf[3];
available[4,:] .=thermal_cf[4];
available[5,:] .=wind_cf;
available[6,:] .=solar_cf;


@constraint(Q,avail[g in G, t in T],y[g,t] <= available[g,t] *x[g]);
@constraint(Q, load[t in T], sum(y[:,t])+ n[t] == demand[t]);

set_silent(Q)
```

## Problem 1.5
```julia
optimize!(Q)
total_cost = objective_value(Q)
energy_sources = (value.(x))
notserved= sum(value.(n))

value.(y)

println(round(energy_sources[1], digits =3), " MW via Geothermal Production.");
println(round(energy_sources[2], digits =3), " MW via Coal Production.");
println(round(energy_sources[3], digits =3), " MW via CCGT Production.");
println(round(energy_sources[4], digits =3), " MW via CT Production.");
println(round(energy_sources[5], digits =3), " MW via Wind Production.");
println(round(energy_sources[6], digits =3), " MW via Solar Production.");
println("Total annual cost is \$", round(total_cost, digits = 5));
println(notserved, " MW of energy goes non-served.\n");
```

## Problem 1.6
```julia
plot((value.(y).data)', title = "Segmented Energy Production (Hourly)", xlabel = "Time of Day (hours)",
ylabel = "Energy Production (MW)", label = permutedims(Generators))
areaplot((value.(y).data)', title = "Segmented Energy Production (Hourly)", xlabel = "Time of Day (hours)",
ylabel = "Energy Production (MW)", label = permutedims(Generators))
plot!(demand, color=:red, label="Demand", linestyle=:dash)
```
takeaways: There exist several takeaways from this graph_________________. 



# Problem 2

## Problem 2.1
This new legislation would cause us to have to add an additional constraint that limits the total amount
of emissions below the legal threshold of 1.5MT of CO2. However,
 the objective and decision varables will still remain the same. This new constraint can be denoted as:

```math
365 \sum_G \sum_t CO2_G ≤ 1.5 \text{MT of CO2/ year}
```
## Problem 2.2
```julia
Generators = ["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"];
G = 1:length(Generators);
T= hours;
Q2 = Model(HiGHS.Optimizer);
nseCost = 1000;
maxP = 1.5*10^6;

@variable(Q2, x[G]>=0);
@variable(Q2, y[G,T] >= 0);
@variable(Q2, n[T] >=0);

@objective(Q2, Min, investment_cost'* x + 365*(sum(op_cost'*y) + sum(n)*nseCost))

available = zeros(length(G), length(T));
available[1,:] .=thermal_cf[1];
available[2,:] .=thermal_cf[2];
available[3,:] .=thermal_cf[3];
available[4,:] .=thermal_cf[4];
available[5,:] .=wind_cf;
available[6,:] .=solar_cf;


@constraint(Q2,avail[g in G, t in T],y[g,t] <= available[g,t] *x[g]);
@constraint(Q2, load[t in T], sum(y[:,t])+ n[t] == demand[t]);
@constraint(Q2, pollution[g in G], 365*(sum(y[g,:])*co2_emissions[g]) <= maxP);

set_silent(Q2)
```
## Problem 2.3

```julia
optimize!(Q2)
total_cost = objective_value(Q2)
energy_sources = (value.(x))
notserved= sum(value.(n))

value.(y)

println(round(energy_sources[1], digits =3), " MW via Geothermal Production.");
println(round(energy_sources[2], digits =3), " MW via Coal Production.");
println(round(energy_sources[3], digits =3), " MW via CCGT Production.");
println(round(energy_sources[4], digits =3), " MW via CT Production.");
println(round(energy_sources[5], digits =3), " MW via Wind Production.");
println(round(energy_sources[6], digits =3), " MW via Solar Production.");
println("Total annual cost is \$", round(total_cost, digits = 5));
println(notserved, " MW of energy goes non-served.");
```
Differences:



## Problem 2.4
```julia
plot((value.(y).data)', title = "Segmented Energy Production\n with Emissions Cap (Hourly)", xlabel = "Time of Day (hours)",
ylabel = "Energy Production (MW)", label = permutedims(Generators))
areaplot((value.(y).data)', title = "Segmented Energy Production\n with Emissions Cap (Hourly)", xlabel = "Time of Day (hours)",
ylabel = "Energy Production (MW)", label = permutedims(Generators))
plot!(demand, color=:red, label="Demand", linestyle=:dash)
```
Differences:



## Problem 2.5
```julia
Generators = ["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"];
G = 1:length(Generators);
T= hours;
Q2 = Model(HiGHS.Optimizer);
nseCost = 1000;
maxP = 1501000

@variable(Q2, x[G]>=0);
@variable(Q2, y[G,T] >= 0);
@variable(Q2, n[T] >=0);

@objective(Q2, Min, investment_cost'* x + 365*(sum(op_cost'*y) + sum(n)*nseCost))

available = zeros(length(G), length(T));
available[1,:] .=thermal_cf[1];
available[2,:] .=thermal_cf[2];
available[3,:] .=thermal_cf[3];
available[4,:] .=thermal_cf[4];
available[5,:] .=wind_cf;
available[6,:] .=solar_cf;


@constraint(Q2,avail[g in G, t in T],y[g,t] <= available[g,t] *x[g]);
@constraint(Q2, load[t in T], sum(y[:,t])+ n[t] == demand[t]);
@constraint(Q2, pollution[g in G], 365*(sum(y[g,:])*co2_emissions[g]) <= maxP);
set_silent(Q2)
optimize!(Q2)
total_cost1 = objective_value(Q2)
energy_sources = (value.(x))
value.(y)
new_cost = total_cost-total_cost1
println("Value of additional utility is \$", round(new_cost, digits = 2));
```


# References
I got help from Ian Shen-Costello
Lectures 11 & 13.